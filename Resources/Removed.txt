Sphere::Sphere(Vec3 pos, float radius, int sectors)
	:
	VertexCount(0),
	ColorCount(0),
	Radius(radius)

{
	Position = pos;
	Rotation = Vec3(rand() % 360, rand() % 360, rand() % 360);
	float size = 20;
	int IndexCount = 0;
	float  x = 0, y = 0, z = 0;
	float x1 = 0, y1 = 0, z1 = 0;
	float x2 = 0, y2 = 0, z2 = 0;
	float x3 = 0, y3 = 0, z3 = 0;



	float Widthinc = (Image::Manager.GetAsset("Moon")->Width / 360);
	float Heightinc = (Image::Manager.GetAsset("Moon")->Height / 180);
	float Uinc = (1.0f / (Image::Manager.GetAsset("Moon")->Width)) * Widthinc; //* size;
	float Vinc = (1.0f / (Image::Manager.GetAsset("Moon")->Height))* Heightinc; // * size;

	float Ucoord = 0, Vcoord = 0;
	float LatInc = 360 / sectors;
	float LongInc = 180 / sectors;


	std::vector<Vec3> Verts;
	std::vector<Vec3> Col;
	std::vector<Vec3> Norm;

	std::vector<GLuint> Ind;

	for (float Lat = 0;Lat < 360;Lat += size) 
	{
		for (float Long = 0;Long < 180;Long += size)
		{ // 90 draws top half of a sphere
			x = radius * (sin(RADIANS(Long)) * cos(RADIANS(Lat)));
			y = radius * (sin(RADIANS(Long)) * sin(RADIANS(Lat)));
			z = radius *  cos(RADIANS(Long));

			x1 = radius * (sin(RADIANS(Long + size)) * cos(RADIANS(Lat)));
			y1 = radius * (sin(RADIANS(Long + size)) * sin(RADIANS(Lat)));
			z1 = radius *  cos(RADIANS(Long + size));

			x2 = radius * (sin(RADIANS(Long)) * cos(RADIANS(Lat + size)));
			y2 = radius * (sin(RADIANS(Long)) * sin(RADIANS(Lat + size)));
			z2 = radius *  cos(RADIANS(Long));

			x3 = radius * (sin(RADIANS(Long + size)) * cos(RADIANS(Lat + size)));
			y3 = radius * (sin(RADIANS(Long + size)) * sin(RADIANS(Lat + size)));
			z3 = radius *  cos(RADIANS(Long + size));

			Colors[ColorCount].r = GL_Color(x * 255);
			Colors[ColorCount].g = GL_Color(y * 255);
			Colors[ColorCount].b = GL_Color(z * 255);
			Vertices[VertexCount].x = x;
			Vertices[VertexCount].y = y;
			Vertices[VertexCount].z = z;


			Colors[ColorCount + 1].r = GL_Color(x * 255);
			Colors[ColorCount + 1].g = GL_Color(y * 255);
			Colors[ColorCount + 1].b = GL_Color(z * 255);
			Vertices[VertexCount + 1].x = x1;
			Vertices[VertexCount + 1].y = y1;
			Vertices[VertexCount + 1].z = z1;

			Colors[ColorCount + 2].r = GL_Color(x * 255);
			Colors[ColorCount + 2].g = GL_Color(y * 255);
			Colors[ColorCount + 2].b = GL_Color(z * 255);
			Vertices[VertexCount + 2].x = x2;
			Vertices[VertexCount + 2].y = y2;
			Vertices[VertexCount + 2].z = z2;

			Colors[ColorCount + 3].r = GL_Color(x * 255);
			Colors[ColorCount + 3].g = GL_Color(y * 255);
			Colors[ColorCount + 3].b = GL_Color(z * 255);
			Vertices[VertexCount + 3].x = x3;
			Vertices[VertexCount + 3].y = y3;
			Vertices[VertexCount + 3].z = z3;

			Ind.push_back(VertexCount + 1);
			Ind.push_back(VertexCount + 3);
			Ind.push_back(VertexCount + 2);
			Ind.push_back(VertexCount);
			Ind.push_back(VertexCount + 1);
			Ind.push_back(VertexCount + 2);



			Indices[IndexCount] = VertexCount;
			Indices[IndexCount + 1] = VertexCount + 1;
			Indices[IndexCount + 2] = VertexCount + 2;

			Indices[IndexCount + 3] = VertexCount + 1;
			Indices[IndexCount + 4] = VertexCount + 3;
			Indices[IndexCount + 5] = VertexCount + 2;



			float  magnitude = sqrt(Squared(x) + Squared(y) + Squared(z));
			if (magnitude != 0)
			{
				x /= magnitude;
				y /= magnitude;
				z /= magnitude;
			}
			Normals[VertexCount].x = x;
			Normals[VertexCount].y = y;
			Normals[VertexCount].z = z;

			magnitude = sqrt(Squared(x1) + Squared(y1) + Squared(z1));
			if (magnitude != 0)
			{
				x1 /= magnitude;
				y1 /= magnitude;
				z1 /= magnitude;
			}
			Normals[VertexCount + 1].x = x1;
			Normals[VertexCount + 1].y = y1;
			Normals[VertexCount + 1].z = z1;

			magnitude = sqrt(Squared(x2) + Squared(y2) + Squared(z2));
			if (magnitude != 0)
			{
				x2 /= magnitude;
				y2 /= magnitude;
				z2 /= magnitude;
			}
			Normals[VertexCount + 2].x = x2;
			Normals[VertexCount + 2].y = y2;
			Normals[VertexCount + 2].z = z2;

			magnitude = sqrt(Squared(x3) + Squared(y3) + Squared(z3));
			if (magnitude != 0)
			{
				x3 /= magnitude;
				y3 /= magnitude;
				z3 /= magnitude;
			}
			Normals[VertexCount + 3].x = x3;
			Normals[VertexCount + 3].y = y3;
			Normals[VertexCount + 3].z = z3;

			VertexCount += 4;
			ColorCount += 4;
			IndexCount += 6;

		}
	}
   int c = 0;
   for (float Long = 0; Long < 360;Long += size )
   {
	   for (float Lat = 0; Lat < 180;Lat += size )
	   {
		   UVcoord[c + 0].x = Normals[c + 0].x;// *  .5 - 1;             
		   UVcoord[c + 0].y = Normals[c + 0].z;// *  .5 - 1;             
		   UVcoord[c + 1].x = Normals[c + 1].x;// *  .5 - 1;             
		   UVcoord[c + 1].y = Normals[c + 1].z;// *  .5 - 1;             
		   UVcoord[c + 2].x = Normals[c + 2].x;// *  .5 - 1;             
		   UVcoord[c + 2].y = Normals[c + 2].z;// *  .5 - 1;             
		   UVcoord[c + 3].x = Normals[c + 3].x;// *  .5 - 1;             
		   UVcoord[c + 3].y = Normals[c + 3].z;// *  .5 - 1;             
		   c += 4;									    
	   }
   }
 
	Polygons = new VAOBuffer();
	Polygons->Attach(new VertexBuffer(Vertices, VertexCount));
	Polygons->Attach(new IndexBuffer(Indices, IndexCount));
	Polygons->Attach(new ColorBuffer(Colors, ColorCount));
 	Polygons->Attach(new NormalBuffer(Normals, VertexCount));
	Polygons->Attach(new UVBuffer(UVcoord, VertexCount));

}
Plane::Plane(Vec3 pos, Vec3 rotation, float width, float height)
{
	Position = pos;
	Rotation = rotation;
	Size = Vec2(width, height);
 
	width  *= .5f;
	height *= .5f;

	Transform = glm::rotate(Matrix(1.0f), glm::radians(Rotation.x), Vec3(1.0f, 0.0f, 0.0f));
	Transform = glm::rotate(Transform, glm::radians(Rotation.y), Vec3(0.0f, 1.0f, 0.0f));
	Transform = glm::rotate(Transform, glm::radians(Rotation.z), Vec3(0.0f, 0.0f, 1.0f));
	Transform = glm::translate(Transform, Position);
	Polygons = new VAOBuffer();

	Vec3 V[] =
	{
		Vec3(Position.x - width,    Position.y - height,     Position.z), // FRONT    // 0                                             
		Vec3(Position.x + width,    Position.y - height,     Position.z),             // 1                                    
		Vec3(Position.x + width,    Position.y + height,     Position.z),             // 2                                    
		Vec3(Position.x - width,    Position.y + height,     Position.z),             // 3        
	};
	Vec3 N[] =
	{
		Vec3(1.0f / Position.x - width,1.0f / Position.y - height,1.0f / Position.z), // FRONT    // 0                                             
		Vec3(1.0f / Position.x + width,1.0f / Position.y - height,1.0f / Position.z),             // 1                                    
		Vec3(1.0f / Position.x + width,1.0f / Position.y + height,1.0f / Position.z),             // 2                                    
		Vec3(1.0f / Position.x - width,1.0f / Position.y + height,1.0f / Position.z),             // 3        
	};
	Vec2 UV[] = 
	{
		Vec2(0.0f, 0.0f),
		Vec2(0.0f, 1.0f),
		Vec2(1.0f, 1.0f),
		Vec2(1.0f, 0.0f),
	};
	GLuint I[]=
	{
		3,0,1,   1,2,3,  3,1,0, 1,3,2

	};

	Vec3 Norm;

	Polygons->Attach(new ColorBuffer(N, 4));

	for_loop(Index, 4)
	{
		Norm += N[Index];
	}
	Norm /= 4;
	for_loop(Index, 4)
	{
		N[Index] = Norm;
	}

	Polygons->Attach(new VertexBuffer(V, 4));
	Polygons->Attach(new NormalBuffer(N, 4));
	Polygons->Attach(new UVBuffer(UV, 4));
	Polygons->Attach(new IndexBuffer(I, 12));
}




































//	std::vector<Vec3>    VertexList;
//	std::vector<Vec3>    NormalList;
//	std::vector<Vec2>    TextureCoords;
//	std::vector<Vec4>    ColorList;
//	std::vector<GLuint>  IndexList;
//
//	IndexBuffer    *Indices;
//	VertexBuffer   *Vertices;
//	NormalBuffer   *Normals;
//	ColorBuffer    *Colors;
#if _DEBUG
	//Polygons->Unbind();
	//if (Surface != NULL)
	//	{
	//		Surface->Unbind();
	//	}
#endif

Plane::Plane(Vec3 pos, Vec3 rotation, float width, float height, Material *mat)
{
	*this = Plane( pos,  rotation,  width,  height);
	this->Surface = new Material();
	this->Surface = mat;

}Sphere::Sphere(Vec3 pos, float radius, int sectors, Material *mat)
{
	*this = Sphere(pos, radius, sectors);
//	this->Surface->Attach(mat);
//	this->Surface = mat;
}Cube::Cube(Vec3 pos, float size, Material *mat)
{
	*this = Cube(pos, size);
	this->Surface = new Material();
	this->Surface = mat;


}Block::Block(Vec3 pos, float size, Material *mat)
{
	*this = Block(pos, size);
	this->Surface = new Material();
	this->Surface = mat;

}



//
//		UVcoord[VertexCount + 0].x = Uinc * (Lat + size);
//		UVcoord[VertexCount + 0].y = Vinc * (Long  );
//
//		UVcoord[VertexCount + 1].x = Uinc *(Lat );
//		UVcoord[VertexCount + 1].y = Vinc *(Long + size);
//
//		UVcoord[VertexCount + 2].x = Uinc * (Lat + size);
//		UVcoord[VertexCount + 2].y = Vinc * (Long + size);
//
//
//		UVcoord[VertexCount + 3].x = Uinc * (Lat );
//		UVcoord[VertexCount + 3].y = Vinc * (Long );
 
 

			// 01
			// 11
			// 00 
			// 10




// REMOVED FROM BUFFERS. THE DEBUG WAS CAUSING ISSUES
#if _DEBUG ~~~~~ NORMALS
//  #if _OPENGL_FIXED_FUNCTION
//  	glDisableClientState(GL_NORMAL_ARRAY);
//  	glBindBuffer(GL_ARRAY_BUFFER, 0);
//  #else
//  #endif
#endif

void IndexBuffer::Unbind()
{
#if _DEBUG
#if _OPENGL_FIXED_FUNCTION
	glDisableClientState(GL_COLOR_ARRAY);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
#else

#endif
//	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
#else
#endif
}

void ColorBuffer::Unbind()
{
#if _DEBUG
#if _OPENGL_FIXED_FUNCTION
	glDisableClientState(GL_COLOR_ARRAY);
	glBindBuffer(GL_ARRAY_BUFFER, 0);
#else
	//	glBindBuffer(GL_ARRAY_BUFFER, 0);
#endif
#else
#endif
}

// REMOVED OUT THE COMMENTED PART BELOW THAT WORKS THE NON-INTERLEAVED DATA
void VAOBuffer::Attach(ColorBuffer   *color)
{
	Colors = color;
	glBindVertexArray(VAO);
//..................THIS IS WHAT WAS REMOVED.................................
//	glUseProgram(Shader::GetActiveShader()->GetName());
//...........................................................................
	glBindBuffer(GL_ARRAY_BUFFER, Colors->ID);

	GLuint Cpoint = glGetAttribLocation(Shader::GetActiveShader()->GetName(), "VertexColor");	glEnableVertexAttribArray(Cpoint);
	glVertexAttribPointer(Cpoint, 4, GL_FLOAT, GL_FALSE, 0, (char *)NULL);
}

void VAOBuffer::Bind()
{
	if (Woven == true)
	{

#ifdef  _OPENGL_FIXED_FUNCTION
		glBindBuffer(GL_ARRAY_BUFFER, BatchID);
		glVertexPointer(4, GL_FLOAT, sizeof(VertexType), (char *)NULL);
		glEnableClientState(GL_VERTEX_ARRAY);

		//glBindBuffer(GL_ARRAY_BUFFER, BatchID);
		glColorPointer(4, GL_FLOAT, sizeof(VertexType), (char*)(sizeof(float) * 4));
		glEnableClientState(GL_COLOR_ARRAY);

		//	glBindBuffer(GL_ARRAY_BUFFER, BatchID);
		glNormalPointer(GL_FLOAT, sizeof(VertexType), (char*)(sizeof(float) * 8));
		glEnableClientState(GL_NORMAL_ARRAY);
		Indices->Bind();
#else
	 	glBindVertexArray(VAO);
 		Indices->Bind();
#endif

	}
	else
	{
		glBindVertexArray(VAO);
		if (Textures)  Textures->Bind();
		Indices->Bind();
// BELOW IS WHAT WAS REMOVED
//		if (Vertices)  Vertices->Bind();
//		GLuint Vpoint = glGetAttribLocation(Shader::GetActiveShader()->GetName(), "VertexPosition"); glEnableVertexAttribArray(Vpoint);
//		glVertexAttribPointer(Vpoint, 4, GL_FLOAT, GL_FALSE, 0, (char)NULL);
//
//
//		if (Indices)    Indices->Bind();
//
//		if (Textures)  Textures->Bind();
//		//glActiveTexture(GL_TEXTURE0);
//		//Image::Manager.GetAsset("Moon")->Bind();
//
//		if (Colors)      Colors->Bind();
//		GLuint Cpoint = glGetAttribLocation(Shader::GetActiveShader()->GetName(), "VertexColor");	glEnableVertexAttribArray(Cpoint);
//		glVertexAttribPointer(Cpoint, 4, GL_FLOAT, GL_FALSE, 0, (void*)NULL);
//
//		if (Normals)    Normals->Bind();
//		GLuint Npoint = glGetAttribLocation(Shader::GetActiveShader()->GetName(), "VertexNormal"); glEnableVertexAttribArray(Npoint);
//		glVertexAttribPointer(Npoint, 4, GL_FLOAT, GL_FALSE, 0, (void*)NULL);
// 
	}
}



//  class VAO
//  {
//  public:
//  	VAO();
//  	~VAO();
//  
//  	GLuint ID;
//  
//  	void EnableAttribute(GLuint index);
//  	void DisableAttribute(GLuint index);
//  	void Bind();
//  	void Unbind();
//  	int MaxAttributes();
//  private:
//  	GLint MaxAttrib;
//  };
//  

//  VAO::VAO()
//  {
//  	glGenVertexArrays(1, &ID);
//  }
//  VAO::~VAO()
//  {
//  	//glDeleteVertexArrays(ID);
//  	//	Print("Delete VAO");
//  }
//  void VAO::Bind()
//  {
//  	glBindVertexArray(ID);
//  }
//  void VAO::Unbind()
//  {
//  }
//  void VAO::EnableAttribute(GLuint ind)
//  {
//  	glEnableVertexAttribArray(ind);
//  }
//  void VAO::DisableAttribute(GLuint ind)
//  {
//  	glDisableVertexAttribArray(ind);
//  }
//  int  VAO::MaxAttributes()
//  {
//  	glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &MaxAttrib);
//  	return MaxAttrib;
//  }




// using namespace std;
// using namespace glm;
// 
// 
// struct Vertex
// {
//     Vec3 Position;
//     Vec3 Normals;
//     Vec2 Uv;
// };
// 
// 
// ///     OpenGL BUFFER ABSTRACTIONS
//
/*
================================================================================================================================================================
//
//
//      BUFFERs MODULE
//
//
=================================================================================================================================================================
*/
// 
// class VAO
//  {
//  public:
//  	VAO();
//  	~VAO();
//  
//  	GLuint ID;
//  	
//  	void EnableAttribute(GLuint index);
//  	void DisableAttribute(GLuint index);
//  	void Bind();
//  	void Unbind();
//  	int MaxAttributes();
//  private:
//  	GLint MaxAttrib;
//  };
// //_______________________________________________________________________________________________________________________________________________________________
// class VertexBuffer
// {
// public:
//     VertexBuffer() {}
//    ~VertexBuffer();
//     VertexBuffer(Vec3 *Vertexdata, GLsizei count);
// 	VertexBuffer(Vec4 *vertexdata, GLsizei vcount);
// 
// 	GLuint ID;
//     GLint  ElementCount;
// 
//     void Bind();
//     void Unbind();
// 
//     void Lock(GLenum access);
//     void Unlock();
// 	Vec4  *Data;
//     GLfloat *Read();
//     void Write(GLuint pos, GLfloat *data);
//     void Rebuild();
// private:
// 
// };
// //_______________________________________________________________________________________________________________________________________________________________
// class ColorBuffer
//  {
//  public:
//      ColorBuffer() {}
//      ~ColorBuffer();
//  	ColorBuffer(Vec3 *ColorData, GLsizei count)
//  {
//  	Vec4 *tempdata = new Vec4[count];
//  
//  	for_loop(Index, count)
//  	{
//  		tempdata[Index] = Vec4(ColorData[Index].r, ColorData[Index].g, ColorData[Index].b, 1.0f);
//  	}
//  	*this = ColorBuffer(tempdata, count);
//  	delete[]tempdata;
//  }
//      ColorBuffer(Vec4 *ColorData, GLsizei count);
//  
//      GLuint ID;
//      GLint  ElementCount;
//  
//  public:
//      void Bind();
//      void Unbind();
//  	Vec4 *Data;
//  private:
//  	
//  };
// //_______________________________________________________________________________________________________________________________________________________________
// class NormalBuffer
//  {
//  public:
//      NormalBuffer() {}
//      ~NormalBuffer();
//  
//  	NormalBuffer(Vec4 *NormalData, GLsizei count);
//  	NormalBuffer(Vec3 *NormalData, GLsizei count);
//  
//      GLuint ID;
//      GLint  ElementCount;
//  
//  public:
//      void Bind();
//      void Unbind();
//  	Vec4 *Data;
//  
//  private:
//  };
// //_______________________________________________________________________________________________________________________________________________________________
// class IndexBuffer
// {
// public:
//     IndexBuffer() {}
//     ~IndexBuffer();
//     IndexBuffer(GLuint *data, GLsizei count);
// 
//     GLuint ID;
//     GLuint ElementCount;
// 
// public:
//     void Bind();
//     void Unbind();
// private:
// 	GLuint *Data;
// };
// //_______________________________________________________________________________________________________________________________________________________________
// class Image
//  {
//  public:
//      Image();
// VAO::VAO() 
// {
//     glGenVertexArrays(1, &ID);
// }
// VAO::~VAO()
// {
//     //glDeleteVertexArrays(ID);
//	Print("Delete VAO");
// }
// void VAO::Bind()
// {
//     glBindVertexArray(ID);
// }
// void VAO::Unbind()
//{
//    glBindVertexArray(0);
//}
//// void VAO::EnableAttribute(GLuint ind)
// {
//     glEnableVertexAttribArray(ind);
// }
// void VAO::DisableAttribute(GLuint ind)
// {
// #ifdef _DEBUG
//     glDisableVertexAttribArray(ind);
// #endif
// }
// int  VAO::MaxAttributes()
// {
//     glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &MaxAttrib);
//     return MaxAttrib;
// }
// // 
// // //https://www.slideshare.net/Mark_Kilgard/using-vertex-bufferobjectswell
// //==================================================================================================================================================
// //__________________________________ VERTEX BUFFER CLASS ___________________________________________________________________________________________
// // 
// // ertexBuffer::~VertexBuffer()
// {
// //    glDeleteBuffers(1, &ID);
// }
// // 
// // ertexBuffer::VertexBuffer(Vec4 *vertexdata, GLsizei vcount)
// // 	: ElementCount(vcount),
// // 	ID(0)
// // 
// // 	Data = new Vec4[vcount];
// // 	memcpy(Data, vertexdata, sizeof(Vec4) * vcount);
// // 	_GL(glGenBuffers(1, &ID));
// // 	glBindBuffer(GL_ARRAY_BUFFER, ID);
// // 	glBufferData(GL_ARRAY_BUFFER, ElementCount * sizeof(Vec4), vertexdata, GL_DYNAMIC_DRAW);
// // 	glBindBuffer(GL_ARRAY_BUFFER, 0);
// // 
// // ertexBuffer::VertexBuffer(Vec3 *vertexdata, GLsizei vcount)
// // 	: ElementCount(vcount),
// // 	ID(0)
// // 
// // 	Vec4 *tempdata = new Vec4[vcount];
// // 
// // 	for_loop(Index, vcount)
// 	{
// 		tempdata[Index] = Vec4(vertexdata[Index].r, vertexdata[Index].g, vertexdata[Index].b, 1.0f);
// 	}
// // 	*this = VertexBuffer(tempdata, vcount);
// // 	delete[]tempdata;
// // 
// // oid VertexBuffer::Bind()
// // 
// // if _OPENGL_FIXED_FUNCTION
// //    glBindBuffer(GL_ARRAY_BUFFER, ID);
// //    _GL(glVertexPointer(4, GL_FLOAT, 0, (char *)NULL));
// //    glEnableClientState(GL_VERTEX_ARRAY);
// // else
// //    glBindBuffer(GL_ARRAY_BUFFER, ID);
// //    glVertexAttribPointer(Shader::VertexLocation, 4, GL_FLOAT, GL_FALSE, 0, (char *)NULL);
// // endif
// // 
// // 
// // oid VertexBuffer::Unbind()
// {
// #if _DEBUG
// #if _OPENGL_FIXED_FUNCTION
//           glDisableClientState(GL_VERTEX_ARRAY);
//     glBindBuffer(GL_ARRAY_BUFFER,0);
// #else
// #endif
// #endif
// }
// // oid VertexBuffer::Lock(GLenum access)
// {
//         Data = (Vec4 *)glMapBuffer(ID, access);
// }
// // oid VertexBuffer::Unlock()
// {
//     glUnmapBuffer(ID);
// }
// // oid VertexBuffer::Rebuild()
// {    
//     glBindBuffer(GL_ARRAY_BUFFER, ID);
//         glBufferSubData(GL_ARRAY_BUFFER, 0,ElementCount * sizeof(Vec4), Data) ; 
//     glBindBuffer(GL_ARRAY_BUFFER,0);
// }
// // //  void VertexBuffer::Write(GLuint pos, GLfloat *data)
// //  {
// //  	glBindBuffer(GL_ARRAY_BUFFER, ID);
// //  	glBufferSubData(GL_ARRAY_BUFFER, 0, ElementCount * sizeof(Vec3), Data);
// //  	glBindBuffer(GL_ARRAY_BUFFER, 0);
// //  }
// // 
// // //==================================================================================================================================================
// //__________________________________ INDEX BUFFER CLASS ____________________________________________________________________________________________
// // 
// // ndexBuffer::~IndexBuffer()
// {
// //    glDeleteBuffers(1, &ID);
// }
// // ndexBuffer::IndexBuffer(GLuint *data, GLsizei count)
//            : ElementCount(count),
//              ID(0)
// {
//         Data = new GLuint[count];
//         memcpy(Data, data, sizeof(GLuint) * count);
// 
//         glGenBuffers(1,&ID);
//         glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,ID);
//         glBufferData(GL_ELEMENT_ARRAY_BUFFER, count * sizeof(GLuint), data, GL_STATIC_DRAW);
//         glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
// }
// // oid IndexBuffer::Bind()
// {
// #if _OPENGL_FIXED_FUNCTION
//         glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ID);
//         glIndexPointer(GL_FLOAT, 0, (void *) NULL);
//         glEnableClientState(GL_INDEX_ARRAY);
// #else
//         glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ID);
// #endif
// }
// // oid IndexBuffer::Unbind()
// {
// #if _DEBUG
// #if _OPENGL_FIXED_FUNCTION
//     glDisableClientState(GL_COLOR_ARRAY);
//     glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
// #else
// 
// #endif
//     glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
// #else
// #endif
// }
// // 
// // //==================================================================================================================================================
// //__________________________________ COLOR BUFFER CLASS ____________________________________________________________________________________________
// // 
// // olorBuffer::~ColorBuffer()
// {
// //        glDeleteBuffers(1, &ID);
// }
// // olorBuffer::ColorBuffer(Vec4 *ColorData, GLsizei count)
//            : ElementCount(count),
//              ID(0)
// {
//     Data = new Vec4[count];
//     memcpy(Data, ColorData, sizeof(Vec4) * count);
//     glGenBuffers(1 , &ID);
//     glBindBuffer(GL_ARRAY_BUFFER, ID);
//         glBufferData(GL_ARRAY_BUFFER, ElementCount * sizeof(Vec4), ColorData, GL_STATIC_DRAW) ; 
//     glBindBuffer(GL_ARRAY_BUFFER, 0); //Unbind BUFFER_ID since its now bound to the ID;
// }
// // oid ColorBuffer::Bind()
// {
// #if _OPENGL_FIXED_FUNCTION
//     glBindBuffer(GL_ARRAY_BUFFER, ID);
//     glColorPointer(4, GL_FLOAT, 0, (char *) NULL);
//     glEnableClientState(GL_COLOR_ARRAY);
// #else
//     glBindBuffer(GL_ARRAY_BUFFER, ID);
//     glVertexAttribPointer(Shader::ColorsLocation, 4, GL_FLOAT, GL_FALSE, 0, (char *)NULL);
// #endif
// 
// }
// // oid ColorBuffer::Unbind()
// {
// #if _DEBUG
// #if _OPENGL_FIXED_FUNCTION
//          glDisableClientState(GL_COLOR_ARRAY);
//     glBindBuffer(GL_ARRAY_BUFFER,0);
// #else
//     glBindBuffer(GL_ARRAY_BUFFER,0);
// #endif
// #else
// #endif
// } 
// // 
// // //==================================================================================================================================================
// //__________________________________ NORMAL BUFFER CLASS ___________________________________________________________________________________________
// // TODO: Much work needs to be done here.
// // ormalBuffer::~NormalBuffer()
// {
// //    glDeleteBuffers(1, &ID);
// }
// // ormalBuffer::NormalBuffer(Vec4 *NormalData, GLsizei count)
//             : ElementCount(count),
//               ID(0)
// {
//     Data = new Vec4[count];
//     memcpy(Data, NormalData, sizeof(Vec4) * count);
//     glGenBuffers(1 , &ID);
//     glBindBuffer(GL_ARRAY_BUFFER, ID);
//         glBufferData(GL_ARRAY_BUFFER, ElementCount * sizeof(Vec4), NormalData, GL_STATIC_DRAW) ; 
//     glBindBuffer(GL_ARRAY_BUFFER,0); 
// }
// // oid NormalBuffer::Bind()
//                 
// {
// #if _OPENGL_FIXED_FUNCTION
//     glBindBuffer(GL_ARRAY_BUFFER, ID); // 
//         glNormalPointer(GL_FLOAT, 0, (void *) NULL);
//         _GL(glEnableClientState(GL_NORMAL_ARRAY));
// #else
//     glBindBuffer(GL_ARRAY_BUFFER, ID);
//     glVertexAttribPointer(Shader::NormalsLocation, 3, GL_FLOAT, GL_FALSE, 0, 0);
// #endif
// }
// // oid NormalBuffer::Unbind()
// {
// #if _DEBUG
// #if _OPENGL_FIXED_FUNCTION
//            glDisableClientState(GL_NORMAL_ARRAY);
//        glBindBuffer(GL_ARRAY_BUFFER,0);
// #else
//     glBindBuffer(GL_ARRAY_BUFFER, 0);
// #endif
// #endif
// }
// // 
// // ormalBuffer::NormalBuffer(Vec3 *NormalData, GLsizei vcount)
// 	: ElementCount(vcount),
// 	ID(0)
// {
// 	Vec4 *tempdata = new Vec4[vcount];
// 
// 	for_loop(Index, vcount)
//	{
//		tempdata[Index] = Vec4(NormalData[Index].r, NormalData[Index].g, NormalData[Index].b, 1.0f);
//	}
// 	*this = NormalBuffer(tempdata, vcount);
// 	delete[]tempdata;
// }





//      ~Image();
//      Image(const char *filename);
//      Image(GLenum param, const char *filename);
//  
//      GLuint ID;
//  
//  	GLuint Width,
//  		   Height,
//  		   ImageSize;
//  
//      GLubyte* LoadBMP(const char *filename); // Possibly make this Static and return an entire Image object
//  
//      inline void SetSize(float width, float height);
//  
//      void GenColorTexture(float width, float height);
//      void GenDepthTexture(float width, float height);
//      void Bind();
//      void Unbind();
//  
//      void VerticalFlip();// void *image, int w, int h, int bytes_per_pixel)
//  
//  	GLint MaxTextureSize();
//  private:
//  
//  	GLubyte header[54];
//  	GLuint  dataPos;
//  
//  	GLubyte *Data;
//  	GLint MaxTexture;
//  
//  };
// //_______________________________________________________________________________________________________________________________________________________________
// class UVBuffer
//   {
//   public:
//       UVBuffer();
//       ~UVBuffer();
//		UVBuffer(Vec2 *UVdata, GLsizei count); //UVBuffer(Image &img, Vec2 *UVdata, GLsizei count);
//
//       GLuint ID;
//       GLuint ElementCount;
//
//       Vec2    *Data;
//       //Image Picture;
//   public:
//
//       void Bind();
//       void Unbind();
//   };
// //_______________________________________________________________________________________________________________________________________________________________
// class TextureBuffer
//  {
//  	TextureBuffer();
//  	~TextureBuffer();
//  
//  
//  	Image    *Texture;
//  	UVBuffer *TextureCoords;
//  
//  	void Bind();
//  	void Unbind();
//  };
// //_______________________________________________________________________________________________________________________________________________________________














//  void Sphere::Update()
//  {
//  }
//  	  ViewMatrix = glm::translate(Matrix(1), Position);
  	  ViewMatrix = glm::rotate(ViewMatrix, (float)RADIANS(Rotation.y), Up);
	  ViewMatrix = glm::rotate(ViewMatrix, (float)RADIANS(Rotation.x), Right);
	  ViewMatrix = glm::inverse(ViewMatrix);



  	// ClampCamera();
  	Vec3 newFront;
  	newFront.x = cos(glm::radians(Rotation.y)) * cos(glm::radians(Rotation.x));
  	newFront.y = sin(glm::radians(Rotation.x));
  	newFront.z = sin(glm::radians(Rotation.y)) * cos(glm::radians(Rotation.x));
    	Forward = glm::normalize(newFront);
  
  	///Also re-calculate the Right and Up vector
  	Right = glm::normalize(glm::cross(Forward, Up));
  	Up = glm::normalize(glm::cross(Right, Forward));
  void Sphere::Render()
  {
  
  	glPushMatrix();
  	glTranslatef(Position.x, Position.y, Position.z);
  	glRotatef(Rotation.x, 1, 0, 0);
  	glRotatef(Rotation.z, 0, 0, 1);
  	glRotatef(Rotation.y, 0, 1, 0);
  	Polygons->Bind();
  	//glDrawArrays(GL_TRIANGLE_STRIP, 0, VertexCount);
  	glDrawElements(GL_TRIANGLE_STRIP, Polygons->Indices->ElementCount , GL_UNSIGNED_INT, nullptr);
  	Polygons->Unbind();
  	glPopMatrix();
  }



  	if (BatchID != 0)
	{
	Indices->Unbind();

 	}
	else
	{




  	if (BatchID != 0)
	{
		glBindBuffer(GL_ARRAY_BUFFER, BatchID);
		if (Indices)    Indices->Bind();
		GLuint Location = glGetAttribLocation(Shader::GetActiveShader()->Name(), "VertexPosition");
		glEnableVertexAttribArray(Location);
 		_GL(glVertexAttribPointer(Location, 3, GL_FLOAT, GL_FALSE, 0, 0));

		Location = glGetAttribLocation(Shader::GetActiveShader()->Name(), "VertexNormal");
		glEnableVertexAttribArray(Location);
 		_GL(glVertexAttribPointer(Location, 3, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(NormalsOffset)));

		Location = glGetAttribLocation(Shader::GetActiveShader()->Name(), "VertexColor");
		glEnableVertexAttribArray(Location);
		_GL(glVertexAttribPointer(Location, 4, GL_FLOAT, GL_FALSE,0, BUFFER_OFFSET(ColorsOffset)));

	}
	else
	{ 

	

//	glActiveTexture(GL_TEXTURE1);
//	Skin->NormalsTexture.Bind();
//	glActiveTexture(GL_TEXTURE2);
//	Skin->GlowTexture.Bind();
//	glActiveTexture(GL_TEXTURE3);
//	Skin->SpecularTexture.Bind();
