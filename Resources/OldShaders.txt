

#version 130
#pragma debug(off)
precision lowp vec4;
precision lowp vec3;

uniform mat4 ProjectionMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ModelMatrix;
uniform mat4 CameraPos;
//-------------------------------------------------------------------------
//         VERTEX ATTRIBUTES IN
attribute vec4 VertexPosition;
attribute vec4 VertexColor;
attribute vec4 VertexNormal;              

//-------------------------------------------------------------------------
//           LIGHTING IN
uniform vec3 MaterialAmbient;
uniform vec3 MaterialDiffuse;
uniform vec3 MaterialSpecular;
uniform vec3 LightPosition1;

//=========================================================================

//-------------------------------------------------------------------------
//    VERTEX COLOR AND NORMAL OUT
out vec4 FColor;
out vec3 Fposition;
out vec3 FNormal;

//-------------------------------------------------------------------------
//        LIGHTING OUT
//out vec3 Diffuse;
//out float Diffuse;
out vec3 Ambient;
out vec3 LPos;
//-------------------------------------------------------------------------
 

 //out float Intensity;
 out vec3 LightVector;
 out float Distance;

//====================================================================================================================================================================================================================================================================================================================================================
//======================= WORKING PER VERTEX SHADER FINAL =====================================================================================================================================================================================================================================================================================================
//====================================================================================================================================================================================================================================================================================================================================================


void main()
{
//----------------------------------------------------------------------------------------------------------------------
// TEMPORARY STUFF JUST FOR CLARITY. LATER TO BE REPLACED BY UNIFORMS AND ALL AROUND BETTER CODE
//----------------------------------------------------------------------------------------------------------------------

	mat4 ModelViewMatrix =  (ViewMatrix * ModelMatrix);                               // GET EYE SPACE MATRIX
	mat4 ModelViewProjectionMatrix =  (ProjectionMatrix * ViewMatrix *  ModelMatrix);  // GET THE MVP MATRIX

//----------------------------------------------------------------------------------------------------------------------
// TRANSFORM CORDS INTO EYE SPACE 
//----------------------------------------------------------------------------------------------------------------------

	FNormal   =  (ModelViewMatrix * vec4(VertexNormal.xyz, 0.0f)).xyz;            // NORMAL ORIENTATION IN EYE SPACE: NOTE: Notice the 0.0f in the Vec4 for VertexNormal. That has caused me issues I think.
	Fposition =  (ModelViewMatrix * vec4(VertexPosition.xyz, 1.0f)).xyz;          // EYE SPACE VERTEX
	LPos      =  (ViewMatrix * vec4(LightPosition1,  1.0f)).xyz;  // !! Already in World Space No Need for Translation like the above vertices and Normals !! // LIGHT POSITION IN WORLD SPACE !! 

//----------------------------------------------------------------------------------------------------------------------
    Distance = length(LPos - Fposition);                                    // GET THE MAGNITUDE OF LIGHT VECTOR
    LightVector = normalize(LPos - Fposition);                               // GET THE DIRECTION OF THE LIGHT VECTOR
  
//----------------------------------------------------------------------------------------------------------------------
// Calculate the dot product of the light vector and vertex normal. If the normal and light vector are
// pointing in the same direction then it will get max illumination.
//----------------------------------------------------------------------------------------------------------------------

  //  float Intensity = max(dot(FNormal, LightVector), 0.1);  
//	Intensity = Intensity * (1.0 / (1.0 + (0.0025 * (Distance * Distance))));                  // FADE THE LIGHTING OVER DISTANCE

    FColor = VertexColor; //vec4( Intensity);                                                    // VERTEX COLOR FROM GL COLOR BUFFER
    gl_TexCoord[0] = gl_MultiTexCoord0;                                                // GET THE TEXTURE COORD TO BE USED IN THE FRAGMENT SHADER. THIS TO WILL SOON BE A VERTEX ATTRIBUTE OF VertexUVCoords

//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
    gl_Position = ModelViewProjectionMatrix * VertexPosition;
}


//====================================================================================================================================================================================================================================================================================================================================================
//==================== FRAGMENT FOR WORKING PER VERTEX SHADER ( MODIFIED ) ==========================================================================================================================================================================================================================================================================================================
//====================================================================================================================================================================================================================================================================================================================================================

#version 130
#pragma debug(off)


uniform sampler2D DiffuseTexture;
uniform sampler2D NormalsTexture;

 
//-------------------------------------------------------------------------
//        LIGHTING IN

in vec3 Ambient;
in vec3 LPos;


//-------------------------------------------------------------------------

 //in float Intensity;
in vec3 Fposition;
in vec4 FColor;
in vec3 FNormal;
in vec3 LightVector;
in float Distance;

void main()
{ 
  vec3 NormalMap = texture(NormalsTexture, gl_TexCoord[0].st).xyz;

  float Intensity = max(dot(FNormal - NormalMap, LightVector), 0.1);  
  Intensity = Intensity * (1.0 / (1.0 + (0.0025 * (Distance * Distance))));  

   vec3 result = vec3(Intensity) *  texture(DiffuseTexture, gl_TexCoord[0].st).xyz; //(Diffuse)

    gl_FragColor =  vec4(result,1.0f);// 
}
 //====================================================================================================================================================================================================================================================================================================================================================
//====================================================================================================================================================================================================================================================================================================================================================
//====================================================================================================================================================================================================================================================================================================================================================




















/*------------------------------------------------------------------------------------- 
PerVertex Vertex Lighting shader


#version 120

attribute vec3 VertexPosition;
attribute vec3 VertexNormal;
attribute vec4 VertexColor;

varying vec4 color;
void main()
{
vec3 lpos = vec3(0,0,0);
vec3 nVertexNormal = normalize(VertexNormal);
 vec3 modelViewVertex = vec3(gl_ModelViewMatrix * vec4(VertexPosition, 1.0));
 vec3 modelViewNormal = vec3(gl_ModelViewMatrix * vec4(nVertexNormal, 0.0));
 float distance = length(lpos - modelViewVertex);
 vec3 lightVector = normalize(lpos - modelViewVertex);
 float diffuse = max(dot(modelViewNormal, lightVector), 1.0);
 diffuse = diffuse * (1.0 / (1.0 + (0.25 * distance * distance)));


color = VertexColor * diffuse;
gl_Position = gl_ModelViewProjectionMatrix * vec4(VertexPosition.xyz, 1.0f);
}
________________________________________________________________________________________*/










/*  PerPixel Vertex shader
_________________________________________________________________________________________________________

uniform mat4 u_MVPMatrix;      // A constant representing the combined model/view/projection matrix.
uniform mat4 u_MVMatrix;       // A constant representing the combined model/view matrix.
 
attribute vec4 a_Position;     // Per-vertex position information we will pass in.
attribute vec4 a_Color;        // Per-vertex color information we will pass in.
attribute vec3 a_Normal;       // Per-vertex normal information we will pass in.
 
varying vec3 v_Position;       // This will be passed into the fragment shader.
varying vec4 v_Color;          // This will be passed into the fragment shader.
varying vec3 v_Normal;         // This will be passed into the fragment shader.
 
// The entry point for our vertex shader.
void main()
{
    // Transform the vertex into eye space.
    v_Position = vec3(u_MVMatrix * a_Position);
 
    // Pass through the color.
    v_Color = a_Color;
 
    // Transform the normal's orientation into eye space.
    v_Normal = vec3(u_MVMatrix * vec4(a_Normal, 0.0));
 
    // gl_Position is a special variable used to store the final position.
    // Multiply the vertex by the matrix to get the final point in normalized screen coordinates.
    gl_Position = u_MVPMatrix * a_Position;
}
_______________________________________________________________________________________________________*/







#FRAGMENTS













/*   PerPixel Lighting Shader
precision mediump float;       // Set the default precision to medium. We don't need as high of a
                               // precision in the fragment shader.
uniform vec3 u_LightPos;       // The position of the light in eye space.
 
varying vec3 v_Position;       // Interpolated position for this fragment.
varying vec4 v_Color;          // This is the color from the vertex shader interpolated across the
                               // triangle per fragment.
varying vec3 v_Normal;         // Interpolated normal for this fragment.
 
// The entry point for our fragment shader.
void main()
{
    // Will be used for attenuation.
    float distance = length(u_LightPos - v_Position);
 
    // Get a lighting direction vector from the light to the vertex.
    vec3 lightVector = normalize(u_LightPos - v_Position);
 
    // Calculate the dot product of the light vector and vertex normal. If the normal and light vector are
    // pointing in the same direction then it will get max illumination.
    float diffuse = max(dot(v_Normal, lightVector), 0.1);
 
    // Add attenuation.
    diffuse = diffuse * (1.0 / (1.0 + (0.25 * distance * distance)));
 
    // Multiply the color by the diffuse illumination level to get final output color.
    gl_FragColor = v_Color * diffuse;
}
*/









 // RANDOM GARBAGE
 ===========================================================================

 
///* first transform the normal into eye space and
//   normalize the result */
//   normal = normalize(gl_NormalMatrix * gl_Normal);
///* pass the halfVector to the fragment shader */
//    halfVector = gl_LightSource[0].halfVector.xyz;
/* Compute the diffuse, ambient and globalAmbient terms */
//    diffuse = gl_FrontMaterial.diffuse * gl_LightSource[0].diffuse;
//    ambient = gl_FrontMaterial.ambient * gl_LightSource[0].ambient;
//    ambient += gl_LightModel.ambient * gl_FrontMaterial.ambient;
//    gl_Position = ftransform();

//  out vec3 Normal;
//    
//  void main()
//  {
//      gl_Position = projection * view * model * vec4(aPos, 1.0);
//      FragPos = vec3(model * vec4(aPos, 1.0));
//      Normal = aNormal;
//	Normal = normalize(vec3(gl_ModelViewMatrix * vec4(VertexNormal,0.0)));

   // Normal = mat3(transpose(inverse(ModelMatrix))) * VertexNormal.xyz; 

//	;
